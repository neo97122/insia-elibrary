<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="{refreshDataGrid();}" width="100%">
	<mx:RemoteObject id="remoteObjectBookManager" destination="bookManager" fault="onFault(event)" result="onResult(event)"/>
    
    <mx:Script>
		<![CDATA[
			import org.insia.mdmsCorp.website.as3.FileReferenceUpload;

			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.binding.utils.BindingUtils;
			import mx.validators.EmailValidator;
			import mx.rpc.events.FaultEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.AbstractConsumer;
			import mx.controls.Spacer;
			import mx.containers.ControlBar;
			import mx.containers.Panel;
			import mx.containers.VBox;
			import mx.charts.renderers.DiamondItemRenderer;
			import mx.controls.Alert;
			import org.insia.mdmsCorp.website.as3.Localizator;
			
			[Bindable]
			[Embed(source='org/insia/mdmsCorp/website/ressources/img/exclamation.png')]
			private var confirmIcon:Class;
			
			[Bindable]
			[Embed(source='org/insia/mdmsCorp/website/ressources/img/noImage.gif')]
			private var coverNoImage:Class;
			
			[Bindable]
			[Embed(source='org/insia/mdmsCorp/website/ressources/img/refresh.gif')]
			private var refreshImage:Class;
         	   
			/**
			 * Inits the canvas
			 **/
			public function refreshDataGrid():void
			{
				remoteObjectBookManager.getBooks();
			}			
            
            /**
            * Validate the book.
            * @return true | false
            **/ 
            private function validateBook():Boolean
            {                
				var validBookTitleEvent:ValidationResultEvent = bookTitleValidator.validate();
				var validBookIsbnEvent:ValidationResultEvent = bookIsbnValidator.validate();
				var validBookQuantityEvent:ValidationResultEvent = bookQuantityValidator.validate();
				
				if (validBookTitleEvent.type == ValidationResultEvent.VALID && validBookIsbnEvent.type == ValidationResultEvent.VALID && validBookQuantityEvent.type == ValidationResultEvent.VALID)
				{
					return true;
				}
				else
				{
					Alert.show(Localizator.getInstance(1).gT('backOfficeErrorBookIsNotValid'));
					return false;
				}
            }
			
			/**
			 * Fills the datagrid on success.
			 * 
			 * @param result event
			 * 
			 **/ 
			private function onResult(event:ResultEvent):void
			{
				try
				{
					var object:Object = event.message.body;
					if (object.message != null)
					{
						Alert.show(object.message, "Erreur", Alert.OK, this, null, confirmIcon, Alert.OK);
					}
				}
				catch (error:Error)
				{
					//ignore
				}
				backOfficeBooksCanvasDataGrid.dataProvider = event.result;
			}
			
			/**
			 * Displays a message if the httpservice failed.
			 * 
			 * @param event FaultEvent
			 * @param httpService String
			 **/
			private function onFault(event : FaultEvent):void
			{
				Alert.show("Error : " + event.fault.message);
			}
			
			/**
			 * First state of the form : it initializes the value of the inputText,
			 * turns off buttons and display a confirm popup if we try to insert a new book.
			 **/
			private function buttonsState1():void
			{
				if (backOfficeAddNewButton.label == Localizator.getInstance(1).gT('backOfficeInsertButton'))
				{
					confirmPopup(Localizator.getInstance(1).gT('backOfficePopupConfirmInsertTitle'),Localizator.getInstance(1).gT('backOfficePopupConfirmInsertLabel'), doInsertNewBook);
				}
				else
				{
					backOfficeUpdateButton.enabled = false;
					backOfficeAddNewButton.label = Localizator.getInstance(1).gT('backOfficeInsertButton');
					backOfficeDeleteButton.enabled = false;
					backOfficeBooksCanvasDataGrid.selectedIndex = -1;
					bookId.text = "";
					bookTitle.text = "";
					bookIsbn.text = "";
					bookSummary.text = "";
					bookQuantity.text = "";
					bookURLCover.text = "";
					bookEditor.text = "";
					bookAutor.text = "";
					coverSwfLoader.source = coverNoImage;
				}
			} 
			
			/**
			 * Second state of the form : it turns on buttons.
			 **/
			private function buttonsState2():void
			{
				backOfficeUpdateButton.enabled = true;
				backOfficeAddNewButton.label = Localizator.getInstance(1).gT('backOfficeAddNewButton');
				backOfficeDeleteButton.enabled = true;
				setCover();
			}
			
			/**
			 * Calls the webservice to update the book.
			 **/
			private function doUpdateBook(event:CloseEvent):void
			{
				if (event.detail == Alert.YES && validateBook()) 
				{
					remoteObjectBookManager.updateBook(backOfficeBooksCanvasDataGrid.selectedItem.title, bookIsbn.text,  bookQuantity.text, bookURLCover.text, bookSummary.text, bookAutor.text, bookEditor.text);
					refreshDataGrid();
				}
			}
			
			/**
			 * Calls the webservice to insert a new book.
			 **/
			private function doInsertNewBook(event:CloseEvent):void
			{
				if (event.detail == Alert.YES && validateBook()) 
				{
					remoteObjectBookManager.createBook(bookTitle.text, bookIsbn.text, parseInt(bookQuantity.text) , bookURLCover.text, bookSummary.text, bookAutor.text, bookEditor.text);
					refreshDataGrid();
				}
			}
			
			/**
			 * Calls the webservice to delete the book.
			 **/
			private function doDeleteBook(event:CloseEvent):void
			{
				if (event.detail == Alert.YES && validateBook()) 
				{
					remoteObjectBookManager.deleteBook(backOfficeBooksCanvasDataGrid.selectedItem.id);
					refreshDataGrid();
					buttonsState1();
				}
			}
			
			/**
			 * Calls the webservice to upload cover. 
			 **/
			 private function doUploadCover():void
			 {
				var fileReferenceUpload:FileReferenceUpload = new FileReferenceUpload(new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png") , "bookCanvas");
			 }
			
			/**
			 * Displays a confirming popup.
			 * 
			 * @param popupTitle String popup title
			 * @param popupLabel String popup label
			 * @param handler Function which is call after confirming the popup
			 * 
			 **/ 
			private function confirmPopup(popupTitle:String, popupLabel:String, handler:Function):void 
			{
				var a:Alert = Alert.show(popupLabel, popupTitle, Alert.YES|Alert.NO, this, handler, confirmIcon, Alert.NO);
			}
			
			/**
			 * Sets the book's cover.
			 **/
			private function setCover():void
			{
				if (backOfficeBooksCanvasDataGrid.selectedItem.image_url != "")
				{
					coverSwfLoader.source = 'org/insia/mdmsCorp/website/ressources/upload/' + backOfficeBooksCanvasDataGrid.selectedItem.image_url;
				}
				else
				{
					coverSwfLoader.source = coverNoImage;
				}
			}
			
		]]>
	</mx:Script>

    <mx:Panel title="{Localizator.getInstance(1).gT('backOfficeBooksCanvasLabel')}" width="100%">
		<mx:VBox horizontalAlign="center" width="100%">
			<mx:Spacer height="10"/>
			<mx:HBox width="100%">
				<mx:Spacer width="10"/>
				<mx:Button icon="{refreshImage}" click="{refreshDataGrid()}" />
		        <mx:DataGrid id="backOfficeBooksCanvasDataGrid" height="100%" change="{buttonsState2()}" width="50%" >
		        	<mx:columns>
		                <mx:DataGridColumn dataField="id" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookIdLabel')}" visible="false"/>
		                <mx:DataGridColumn dataField="reference" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookIsbnLabel')}" width="60"/>
		                <mx:DataGridColumn dataField="title" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookTitleLabel')}"/>
		                <mx:DataGridColumn dataField="image_url" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookURLCoverLabel')}" visible="false"/>
		                <mx:DataGridColumn dataField="description" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookSummaryLabel')}" visible="false"/>
		                <mx:DataGridColumn dataField="author" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookAuthorLabel')}"/>
		                <mx:DataGridColumn dataField="editor" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookEditorLabel')}"/>
		           		<mx:DataGridColumn dataField="quantity" headerText="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookQuantityLabel')}" width="70"/>	
		            </mx:columns>
		        </mx:DataGrid>
		        <mx:Spacer width="10"/>
		        <mx:VBox width="50%" styleName="subBox" verticalAlign="middle" horizontalAlign="top">
			       <mx:HBox width="100%" verticalAlign="middle" horizontalAlign="top">
				        <mx:Form width="100%">    
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookIdLabel')}" width="100%">
				                <mx:Label id="bookId" text="{backOfficeBooksCanvasDataGrid.selectedItem.id}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookTitleLabel')}" width="100%">
				                <mx:TextInput id="bookTitle" text="{backOfficeBooksCanvasDataGrid.selectedItem.title}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookIsbnLabel')}" width="100%">
				                <mx:TextInput id="bookIsbn" text="{backOfficeBooksCanvasDataGrid.selectedItem.reference}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookQuantityLabel')}" width="100%">
				                <mx:TextInput id="bookQuantity" text="{backOfficeBooksCanvasDataGrid.selectedItem.quantity}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookAuthorLabel')}" width="100%">
				                <mx:TextInput id="bookAutor" text="{backOfficeBooksCanvasDataGrid.selectedItem.author}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookEditorLabel')}" width="100%">
				                <mx:TextInput id="bookEditor" text="{backOfficeBooksCanvasDataGrid.selectedItem.editor}"/>
				            </mx:FormItem>
				            <mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookURLCoverLabel')}" width="100%">
				            	<mx:HBox>
				            		<mx:TextInput id="bookURLCover" text="{backOfficeBooksCanvasDataGrid.selectedItem.image_url}" width="90"/>
				                	<mx:Button label="upload" click="{doUploadCover()}" />
				            	</mx:HBox>
				            </mx:FormItem>
				        </mx:Form>
				        <mx:SWFLoader id="coverSwfLoader" source="{coverNoImage}" />
				        <mx:Spacer width="10"/>
					</mx:HBox>
			        <mx:Form width="100%">
		        		<mx:FormItem label="{Localizator.getInstance(1).gT('backOfficeBooksCanvasBookSummaryLabel')}" width="100%">
			                <mx:RichTextEditor height="220" width="100%" id="bookSummary" text="{backOfficeBooksCanvasDataGrid.selectedItem.description}"/>
			            </mx:FormItem>
			        </mx:Form>
		        </mx:VBox>

		        <mx:Spacer width="10"/>
	        </mx:HBox>
	        <mx:Spacer height="5"/>
	        <mx:HBox width="100%" horizontalAlign="center">
	        	<mx:Button id="backOfficeUpdateButton" label="{Localizator.getInstance(1).gT('backOfficeUpdateButton')}" enabled="false" 
	        		click="confirmPopup(Localizator.getInstance(1).gT('backOfficePopupComfirmUpdateTitle'),Localizator.getInstance(1).gT('backOfficePopupComfirmUpdateLabel'), doUpdateBook)"/>
	        	<mx:Button id="backOfficeAddNewButton" label="{Localizator.getInstance(1).gT('backOfficeAddNewButton')}" click="{buttonsState1()}"/>
	        	<mx:Button id="backOfficeDeleteButton" label="{Localizator.getInstance(1).gT('backOfficeDeleteButton')}" enabled="false"
	        		click="confirmPopup(Localizator.getInstance(1).gT('backOfficePopupConfirmDeleteTitle'),Localizator.getInstance(1).gT('backOfficePopupConfirmDeleteLabel'), doDeleteBook)"/>
	        </mx:HBox>
	        <mx:Spacer height="10"/>
		</mx:VBox>
    </mx:Panel>

    <mx:StringValidator id="bookTitleValidator" source="{bookTitle}" property="text" minLength="4"/>
    <mx:StringValidator id="bookIsbnValidator" source="{bookIsbn}" property="text" minLength="4"/>
    <mx:NumberValidator id="bookQuantityValidator" source="{bookQuantity}" property="text" />

</mx:Canvas>  
